from .fingerprint import Fingerprint
import numpy as np

class Fingerprint_wrapper(Fingerprint):
    def __init__(self,fingerprint,reduce_dimensions=True,use_derivatives=True,mic=True,**kwargs):
        """ 
        Fingerprint constructer class that convert atoms object into a fingerprint object with vector and derivatives.
        The fingerprint is generated by wrapping the fingerprint class from gpatom.
        Parameters:
            fingerprint: GPatom fingerprint class.
                The fingerprint class from ASE-gpatom.
            reduce_dimensions : bool
                Whether to reduce the fingerprint space if constrains are used.
            use_derivatives : bool
                Calculate and store derivatives of the fingerprint wrt. the cartesian coordinates.
            mic : bool
                Minimum Image Convention (Shortest distances when periodic boundary is used).
        """
        # Set the arguments
        super().__init__(fingerprint=fingerprint,
                         reduce_dimensions=reduce_dimensions,
                         use_derivatives=use_derivatives,
                         mic=mic,
                         **kwargs)
        
    def update_arguments(self,fingerprint=None,reduce_dimensions=None,use_derivatives=None,mic=None,**kwargs):
        """
        Update the class with its arguments. The existing arguments are used if they are not given.
        Parameters:
            fingerprint: GPatom fingerprint class.
                The fingerprint class from ASE-gpatom.
            reduce_dimensions : bool
                Whether to reduce the fingerprint space if constrains are used.
            use_derivatives : bool
                Calculate and store derivatives of the fingerprint wrt. the cartesian coordinates.
            mic : bool
                Minimum Image Convention (Shortest distances when periodic boundary is used).
        Returns:
            self: The updated object itself.
        """
        if fingerprint is not None:
            self.fingerprint=fingerprint
        if reduce_dimensions is not None:
            self.reduce_dimensions=reduce_dimensions
        if use_derivatives is not None:
            self.use_derivatives=use_derivatives
        if mic is not None:
            self.mic=mic
        return self

    def make_fingerprint(self,atoms,not_masked,**kwargs):
        " The calculation of the gp-atom fingerprint "
        fp=self.fingerprint(atoms,calc_gradients=self.use_derivatives,**kwargs)
        vector=fp.vector.copy()
        if self.use_derivatives:
            derivative=fp.reduce_coord_gradients().copy()
            # not_masked or constrains are not possible in ASE-GPATOM so it is enforced here
            derivative=np.concatenate(derivative[not_masked],axis=1) 
        else:
            derivative=None
        return vector,derivative
    
    def get_arguments(self):
        " Get the arguments of the class itself. "
        # Get the arguments given to the class in the initialization
        arg_kwargs=dict(fingerprint=self.fingerprint,
                        reduce_dimensions=self.reduce_dimensions,
                        use_derivatives=self.use_derivatives,
                        mic=self.mic)
        # Get the constants made within the class
        constant_kwargs=dict()
        # Get the objects made within the class
        object_kwargs=dict()
        return arg_kwargs,constant_kwargs,object_kwargs
